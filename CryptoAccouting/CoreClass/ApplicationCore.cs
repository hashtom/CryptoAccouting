using System; using System.Collections.Generic; using System.Linq; using System.Threading.Tasks;  namespace CryptoAccouting.CoreClass {     public static class ApplicationCore     {         private static Balance myBalance;         private static List<Instrument> instruments;         //private static List<Exchange> Exchanges;          public static void LoadInstruments(){              instruments = new List<Instrument>();

			var exg = new ExchangeAPI();
            //var p = exg.FetchBTCPriceAsyncTest(EnuExchangeType.Zaif);
            //p.Wait();

            //instruments.Add(new Instrument("BTC") { Type = InstrumentType.Crypto, PriceValue = p.Result, LogoFileName = "Images/btc.png" });
            instruments.Add(new Instrument("BTC") { Type = InstrumentType.Crypto, LogoFileName = "Images/btc.png" });             instruments.Add(new Instrument("ETH") { Type = InstrumentType.Crypto, LogoFileName = "Images/eth.png" });             instruments.Add(new Instrument("REP") { Type = InstrumentType.Crypto, LogoFileName = "Images/rep.png" });          }          public static Balance GetTestBalance(){

            // Test Data
            AppConfig.BaseCurrency = EnuBaseCCY.JPY;             Balance mybal;             Instrument coin1, coin2, coin3;// Test Data             Position pos1, pos2, pos3; //Test Data              LoadInstruments();              mybal = new Balance(EnuExchangeType.Zaif);              // Test Data Creation             coin1 = instruments.Where(i=>i.Symbol =="BTC").First();             coin2 = instruments.Where(i => i.Symbol == "ETH").First();             coin3 = instruments.Where(i => i.Symbol == "REP").First();             pos1 = new Position(coin1, "1") { Amount = 850 };             pos2 = new Position(coin2, "2") { Amount = 1000 };             pos3 = new Position(coin3, "3") { Amount = 25000 };             //pos1.AttachPriceData(new Price(coin1) { LatestPrice = 780, DayVolume=100000 });             //pos2.AttachPriceData(new Price(coin2) { LatestPrice = 0.14, DayVolume = 30000 });             //pos3.AttachPriceData(new Price(coin3) { LatestPrice = 0.013, DayVolume = 45560 });                              mybal.AttachPosition(pos1);             mybal.AttachPosition(pos2);             mybal.AttachPosition(pos3);              myBalance = mybal;              return myBalance;         }          public static Balance GetMyBalance(){             return myBalance;         }          public static Instrument GetInstrument(string symbol){             return instruments.Where(i => i.Symbol == symbol).First();         } 
        public static void AttachMyBalance(Balance bal)         {
            myBalance = bal;         }      } } 